<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Posts by Rito Ghosh</title>
<link>https://ritog.github.io/index.html</link>
<atom:link href="https://ritog.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Sun, 02 Mar 2025 18:30:00 GMT</lastBuildDate>
<item>
  <title>Solving First Order Differential Equations with Julia</title>
  <dc:creator>Ritobrata Ghosh</dc:creator>
  <link>https://ritog.github.io/posts/1st-order-DE-julia/1st_order_DE_julia.html</link>
  <description><![CDATA[ 




<section id="solving-first-order-differential-equations-with-julia" class="level2">
<h2 class="anchored" data-anchor-id="solving-first-order-differential-equations-with-julia">Solving First Order Differential Equations with Julia</h2>
<p><img src="https://ritog.github.io/posts/1st-order-DE-julia/fractal-2008101.jpg" class="img-fluid"></p>
<p>Image by <a href="https://pixabay.com/users/thedigitalartist-202249/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2008101">Pete Linforth</a> from <a href="https://pixabay.com//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2008101">Pixabay</a></p>
<section id="introduction" class="level3">
<h3 class="anchored" data-anchor-id="introduction">Introduction</h3>
<p>In this tutorial, we will learn about solving Differential Equations with Julia. Differential Equations are everywhere in Science and Engineering problems. And, being able to solve Differential Equations using computers is very convenient. We will use the <strong>DifferentialEquations.jl</strong> package for solving Differential Equations.</p>
</section>
<section id="who-is-this-for" class="level3">
<h3 class="anchored" data-anchor-id="who-is-this-for">Who is this for</h3>
<p>This is for people who are already familiar with Differential Equations from Mathematics, and who can code, preferably in Julia. Only the very basics of Julia langauge is required. If you are unfamiliar with Julia, and yet you have non-trivial experience with any of Python, C/C++, Ruby, JavaScript, golang, etc., you are fine, and you can follow along.</p>
</section>
<section id="what-we-will-do" class="level3">
<h3 class="anchored" data-anchor-id="what-we-will-do">What we will do</h3>
<p>In this tutorial, we will only focus on using the high level API of the DifferentialEquations.jl package, and we will learn, <em>from scratch</em>, how to translate first order Differential Equations to Julia, and how to solve them using the library. We will not learn about and code up numerical methods of solving Differential Equations such as <a href="https://tutorial.math.lamar.edu/classes/de/eulersmethod.aspx">Euler’s method</a>, <a href="https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods">Runge-Kutta methods</a>, etc. Neither we will talk about testing for accuracy, testing convergence of our algorithms. We will simply and plainly have some DEs in our familiar mathematical notation, and then translate them to a form Julia and the library can understand, and then we call high level APIs of the <code>DifferentialEquations.jl</code> library to solve our DEs. That’s it.</p>
<p>And for this post, we are limiting ourselves to First Order Differential Equations.</p>
</section>
<section id="what-are-differential-equations-a-very-quick-recap" class="level3">
<h3 class="anchored" data-anchor-id="what-are-differential-equations-a-very-quick-recap">What are Differential Equations: a <em>very</em> quick recap</h3>
<section id="normal-equations" class="level4">
<h4 class="anchored" data-anchor-id="normal-equations"><em>“Normal”</em> Equations</h4>
<p>Let’s take a step back and discuss normal equations first. Normal equations are equations involving one or more unknown roots. Like this:</p>
<p><img src="https://latex.codecogs.com/png.latex?x%5E2%20-%203x%20-%2018%20=%200"></p>
<p>And you solve this equation for two values of <img src="https://latex.codecogs.com/png.latex?x">, since this equation is quadratic.</p>
<p>How do you <em>create</em> this equation? You formulate an equation from a real-world scenario. Here’s an example, from which you will get the above equation:</p>
<blockquote class="blockquote">
<p>A farmer is designing a rectangular vegetable garden. The length of the garden is 3 meters longer than its width. The total area of the garden is 18 square meters. How long are the sides of this garden?</p>
</blockquote>
<p>This is how the equation is created: <img src="https://latex.codecogs.com/png.latex?x(x+3)%20=%2018">, where <img src="https://latex.codecogs.com/png.latex?x"> is the length of the smaller side of the garden.</p>
</section>
<section id="differential-equations" class="level4">
<h4 class="anchored" data-anchor-id="differential-equations">Differential Equations</h4>
<p>In normal equations, we solve the equation to find out values of variables previously unknown to us. In case of Differential Equations, we solve to find out <strong><em>functions</em></strong> previously unknown to us.</p>
<p>For normal equations, we find out a relation of the unknown variable with something known to us, concretely.</p>
<p>In DEs, we know how an unknown functions <em>changes</em> with time, or another variable. We form our equation with this derivative of an unknown function, and it’s derivatives- one or more.</p>
<p>It might look like this:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cdfrac%7Bdy%7D%7Bdx%7D%20=%20-y"></p>
<p>Differential Equations are used to model real-world happenings, and we aim to solve for that function.</p>
<p>Forming a Differential Equation is only possible when there is a function that changes with another variable, let’s say, time. It is not enough for the output of a function to differ with time, it is also necessary that the <em>function itself</em> changes with time.</p>
<p>Here are some examples:</p>
<ul>
<li>An ideal candle burns at a constant rate, i.e.&nbsp;the rate of burning of wax is the same when the candle is in its full length, as well as when it is nearly finished. But, the growth rate of population is not the same when the population is low as well as when it is hight. Not population itself increases as population increases, but the rate of increase of population also increases with growing population. (Here I am talking about human population in modern age- with the absence of a natural predator, exceptionally good medical facilities, etc.)</li>
<li>Another example I can think of is the water emission rate of a hole that is used to empty a water tank. When the water tank is nearly full, the rate of emission of water from the hole is very high, but when the tank is almost empty, the rate of water emission is much lower.</li>
<li>When you have just made coffee, and say it’s temperature is <img src="https://latex.codecogs.com/png.latex?70%20%5E%5Ccirc%20C">, and your surrounding temperature is <img src="https://latex.codecogs.com/png.latex?8%20%5E%5Ccirc%20C">, the time taken by the coffee to reach <img src="https://latex.codecogs.com/png.latex?30%20%5E%5Ccirc%20C"> is much lower than the time it takes to reach <img src="https://latex.codecogs.com/png.latex?8%20%5E%5Ccirc%20C"> from <img src="https://latex.codecogs.com/png.latex?12%20%5E%5Ccirc%20C">. The <em>process of cooling</em> is slower when the temperature difference is lower compared to when the temperature difference is larger.</li>
</ul>
<p>These are the situations that you model using Differential Equations.</p>
</section>
</section>
<section id="numerical-solutions-of-differential-equations" class="level3">
<h3 class="anchored" data-anchor-id="numerical-solutions-of-differential-equations">Numerical Solutions of Differential Equations</h3>
<p>There are some situations where finding the exact solution to a Differential Equaion is not possible, or is impractical. This is why we try to find approximate solution. In many situations, this is good enough. When an analytical solution is impossible, numerical olutions is all we have.</p>
<section id="what-we-expect-here" class="level4">
<h4 class="anchored" data-anchor-id="what-we-expect-here">What we expect here</h4>
<p>For the Differential Equations that we will implement here, and will solve numerically, we will see a graph that will predict the behaviour of the unknown function.</p>
</section>
</section>
<section id="first-example-radioactive-decay" class="level3">
<h3 class="anchored" data-anchor-id="first-example-radioactive-decay">First Example: Radioactive Decay</h3>
<p>Radioactivity is the phenomena in which an unstable nucleus loses energy by radiation.</p>
<p>In radioactive decay, if a sample of radioactive nucleus is kept, through several kinds of radiation, the original sample reduces in mass. If there were <img src="https://latex.codecogs.com/png.latex?n"> number of nuclei originally, after a certain amount of time, there would be <img src="https://latex.codecogs.com/png.latex?p"> number of nuclei, where <img src="https://latex.codecogs.com/png.latex?p%20%3C%20n">.</p>
<p>We know that the amount of decay is directly proportional to the number of nuclei present in a sample.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%20%20-%5Cdfrac%7BdN%7D%7Bdt%7D%20&amp;%5Cpropto%20N%20%5C%5C%0A%20%20%20%20%5Cimplies%20-%5Cdfrac%7BdN%7D%7Bdt%7D%20&amp;=%20%5Clambda%20N%0A%5Cend%7Balign%7D%0A"></p>
<p>The sign is negative, because, the rate <em>decreases</em> with decreasing number of nuclei.</p>
<p>We will reframe this equation so that we can implement the equation in Julia, and solve it using the solver.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%20%20&amp;-%5Cdfrac%7BdN%7D%7Bdt%7D%20%5Cpropto%20N%20%5C%5C%0A%20%20%20%20&amp;%5Cimplies%20-%5Cdfrac%7BdN%7D%7Bdt%7D%20=%20%5Clambda%20N%20%5C%5C%0A%20%20%20%20&amp;%5Cimplies%20%5Cdfrac%7BdN%7D%7BN%7D%20=%20-%5Clambda%20dt%0A%5Cend%7Balign%7D%0A"></p>
<p>Julia package <code>DifferentialEquations.jl</code> expects functions to be in this format-</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(du, u, p, t) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> u</span></code></pre></div>
<p>Where <code>du</code> is the first derivative, <code>u</code> is the function, <code>t</code> is the timespan for which we want the function’s output, and <code>p</code> is the parameter, or a set of parameters.</p>
<p>From here, we can frame <code>du</code> to be <code>du[1] = -lambda * u[1]</code>.</p>
<section id="importing-packages" class="level4">
<h4 class="anchored" data-anchor-id="importing-packages">Importing Packages</h4>
<div class="cell" data-tags="[]">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Pkg</span></span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Pkg</span>.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DifferentialEquations"</span>)</span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Pkg</span>.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Plots"</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">DifferentialEquations</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Plots</span></span></code></pre></div>
</div>
</section>
<section id="function-definition" class="level4">
<h4 class="anchored" data-anchor-id="function-definition">Function Definition</h4>
<div class="cell" data-tags="[]">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">radio_decay!</span>(du, u, p, t)</span>
<span id="cb3-2">    lambda <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>p</span>
<span id="cb3-3">    du[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lambda <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> u[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span></code></pre></div>
</div>
</section>
<section id="declaring-parameters" class="level4">
<h4 class="anchored" data-anchor-id="declaring-parameters">Declaring Parameters</h4>
<div class="cell" data-tags="[]">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb4-1">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">60.0e18</span>]           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initial condition</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parameter</span></span>
<span id="cb4-4">lambda <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.28e6</span>         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in SI unit, s^{-1}</span></span>
<span id="cb4-5">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lambda</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># timespan</span></span>
<span id="cb4-8">tspan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5e-6</span>)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># timespan is very small because the half-life is very small</span></span></code></pre></div>
</div>
</section>
<section id="defining-the-ode-problem" class="level4">
<h4 class="anchored" data-anchor-id="defining-the-ode-problem">Defining the ODE Problem</h4>
<div class="cell" data-tags="[]">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb5-1">prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ODEProblem</span>(radio_decay!, N, tspan, p)</span></code></pre></div>
</div>
</section>
<section id="solving-and-plotting-the-solution" class="level4">
<h4 class="anchored" data-anchor-id="solving-and-plotting-the-solution">Solving and Plotting the Solution</h4>
<div class="cell" data-tags="[]">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb6-1">sol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(prob)</span></code></pre></div>
</div>
<div class="cell" data-tags="[]">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(sol, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Radioactive Decay"</span>, xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span>)</span></code></pre></div>
</div>
</section>
</section>
<section id="second-example-newtons-law-of-cooling" class="level3">
<h3 class="anchored" data-anchor-id="second-example-newtons-law-of-cooling">Second Example: Newton’s Law of Cooling</h3>
<p>As we have seen in an example before, we know that something cools much faster when the difference between the temperature of that object and the surrounding temperature is comparatively higher. When the difference is lower, it takes a <em>higher</em> amount of time to cool down.</p>
<p>The problem was quantified by Isaac Newton himself. Let’s understand it.</p>
<p>The temperature of an object, <img src="https://latex.codecogs.com/png.latex?T"> varies with time, <img src="https://latex.codecogs.com/png.latex?t">, and it depends on the difference of the temperature of the object and its surroundings- the ambient temperature <img src="https://latex.codecogs.com/png.latex?T_a">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%20%20%5Cdfrac%7BdT%7D%7Bdt%7D%20&amp;%5Cpropto%20(T%20-%20T_a)%20%5C%5C%0A%20%20%20%20%5Cimplies%20%5Cdfrac%7BdT%7D%7Bdt%7D%20&amp;=%20k(T%20-%20T_a)%0A%5Cend%7Balign%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?k"> is a constant of proportionality, the value of which depends on the material.</p>
<p>Now we will implement this DE in Julia, and solve it using <code>DifferentialEquations.jl</code> library.</p>
<section id="function-definition-1" class="level4">
<h4 class="anchored" data-anchor-id="function-definition-1">Function Definition</h4>
<div class="cell" data-tags="[]">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">newtons_cooling!</span>(du, u, p, t)</span>
<span id="cb8-2">    k, T_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p</span>
<span id="cb8-3">    du[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (u[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> T_a)</span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span></code></pre></div>
</div>
<p>Expected format-</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(du, u, p, t) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> u</span></code></pre></div>
<p>Where <code>du</code> is the first derivative, <code>u</code> is the function, <code>t</code> is the timespan for which we want the function’s output, and <code>p</code> is the parameter, or a set of parameters.</p>
<p>Here, we are using in-place updating to define <code>du</code> because it is memory efficient, and will be a crucial where there is a system of Differential Equations present.</p>
<p>Here we have two parameters- <code>k</code> and <code>T_a</code>, and they are related as <img src="https://latex.codecogs.com/png.latex?T_1%20=%20k%20%5Ctimes%20(T_0%20-%20T_a)">. That is what we implement on line 3 of the function definition.</p>
</section>
<section id="declaring-parameters-1" class="level4">
<h4 class="anchored" data-anchor-id="declaring-parameters-1">Declaring Parameters</h4>
<div class="cell" data-tags="[]">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb10-1">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">80.0</span>]                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Temperature of object</span></span>
<span id="cb10-2">k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.06</span>                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># k, the cooling constant, negative, because cooling</span></span>
<span id="cb10-3">T_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.0</span>                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the ambient temperature</span></span>
<span id="cb10-4">tspan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">300.0</span>)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># time-period for which we want to tract the values of the function, i.e. temperature of the object</span></span>
<span id="cb10-5">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (k, T_a)              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># defining a tuple of parameters as expected by the library</span></span></code></pre></div>
</div>
</section>
<section id="defining-the-ode-problem-1" class="level4">
<h4 class="anchored" data-anchor-id="defining-the-ode-problem-1">Defining the ODE Problem</h4>
<p>Here we define the <code>ODEProblem</code> as required by the solver package.</p>
<div class="cell" data-tags="[]">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb11-1">prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ODEProblem</span>(newtons_cooling!, T, tspan, p)</span></code></pre></div>
</div>
</section>
<section id="solving-the-ode" class="level4">
<h4 class="anchored" data-anchor-id="solving-the-ode">Solving the ODE</h4>
<div class="cell" data-tags="[]">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb12-1">sol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(prob)</span></code></pre></div>
</div>
<div class="cell" data-tags="[]">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(sol,</span>
<span id="cb13-2">    xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time, t"</span>,</span>
<span id="cb13-3">    ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature, T"</span>,</span>
<span id="cb13-4">    title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature vs. Time"</span>)</span></code></pre></div>
</div>
<p>We see very clearly how the value of the function <img src="https://latex.codecogs.com/png.latex?T"> changes with time.</p>
</section>
</section>
<section id="conclusion" class="level3">
<h3 class="anchored" data-anchor-id="conclusion">Conclusion</h3>
<p>We have seen the very basics and intuitive explanation of First Order Differential Equations, and learned about how <code>DifferentialEquations.jl</code> solves DEs, and how to frame DEs according to the format expected by that library.</p>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>I learned a lot about the content of this tutorial from- some amazing teachers that I had in college, and some amazing textbooks like <a href="https://www.cambridge.org/highereducation/books/mathematical-methods-for-physics-and-engineering/FC466374D5B94E86D969100070CA6483#overview">Mathematical Methods for Physics and Engineering</a> by Riley, Hobson, Bence and <a href="https://shop.elsevier.com/books/mathematical-methods-for-physicists/arfken/978-0-12-384654-9">Mathematical Methods for Physicists</a> by Arfken, Weber, Harris. I learned about the DE solver package from many content from the creator: <a href="https://chrisrackauckas.com">Chris Rackauckas</a>, and some example videos from this YouTube channel- <a href="https://www.youtube.com/@doggodotjl">doggo dot jl</a>.</p>
</section>
<section id="discuss" class="level3">
<h3 class="anchored" data-anchor-id="discuss">Discuss</h3>
<p>If you have read this post, and found it interesting or edifying, please let me know. I would like that very much. If you have any criticism, suggestion, or want to tell me anything, just add a comment or let me know privately. Discuss this post on Fediverse, Hacker News, or Twitter/X.</p>
<p><img src="https://ritog.github.io/posts/1st-order-DE-julia/human-gen-sticker.png" width="256"></p>


</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC-BY-NC-SA</div></div></section></div> ]]></description>
  <category>math</category>
  <category>julia</category>
  <category>computational-math</category>
  <guid>https://ritog.github.io/posts/1st-order-DE-julia/1st_order_DE_julia.html</guid>
  <pubDate>Sun, 02 Mar 2025 18:30:00 GMT</pubDate>
  <media:content url="https://ritog.github.io/posts/1st-order-DE-julia/fractal-2008101.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Non-Linear Dynamics Trajectories with Python</title>
  <dc:creator>Ritobrata Ghosh</dc:creator>
  <link>https://ritog.github.io/posts/non-linear-dynamics-trajectories-with-python/index.html</link>
  <description><![CDATA[ 




<section id="non-linear-dynamics-trajectories-with-python" class="level1">
<h1>Non-Linear Dynamics Trajectories with Python</h1>
<p>by Ritobrata Ghosh</p>
<section id="introduction" class="level3">
<h3 class="anchored" data-anchor-id="introduction">Introduction</h3>
<p>In this Notebook, trajectories of the Logistic Map [1] is plotted with Python.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> logistic_function(parameter: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, initial_value: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb2-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> parameter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> initial_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> initial_value)</span></code></pre></div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> logistic_function_trajectory(parameter: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb3-2">                                 initial_value: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb3-3">                                 num_iter: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> np.array:</span>
<span id="cb3-4">    trajectory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(num_iter)</span>
<span id="cb3-5">    trajectory[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> initial_value</span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb3-7">        trajectory[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logistic_function(parameter, initial_value)</span>
<span id="cb3-8">        initial_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trajectory[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.array(trajectory)</span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">logistic_function_trajectory(parameter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.2</span>, initial_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, num_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<pre><code>array([0.8       , 0.352     , 0.5018112 , 0.54999278, 0.54450159,
       0.54564314, 0.54541675, 0.5454621 , 0.54545303, 0.54545485])</code></pre>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb6-2">ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logistic_function_trajectory(parameter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.2</span>, initial_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, num_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span></code></pre></div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_trajectory(xs, ys, x_label, y_label, title):</span>
<span id="cb7-2">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb7-3">    plt.scatter(xs, ys, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>point_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-4">    plt.xlabel(x_label)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-5">    plt.ylabel(y_label)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-6">    plt.title(title)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-7">    plt.grid()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">point_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cyan'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'magenta'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yellow'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>]</span></code></pre></div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">plot_trajectory(xs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>xs, ys<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ys, x_label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$n$'</span>, y_label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$x_n$'</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Trajectory'</span>)</span></code></pre></div>
<p><img src="https://ritog.github.io/posts/non-linear-dynamics-trajectories-with-python/output_10_0.png" class="img-fluid"></p>
</section>
<section id="r-2" class="level3">
<h3 class="anchored" data-anchor-id="r-2"><img src="https://latex.codecogs.com/png.latex?r%20=%202"></h3>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">x_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logistic_function_trajectory(parameter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, initial_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, num_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb10-2">x_n_hat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logistic_function_trajectory(parameter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, initial_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.200001</span>, num_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span></code></pre></div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1">ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(np.subtract(x_n, x_n_hat))</span>
<span id="cb11-2">xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span></code></pre></div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">plot_trajectory(xs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>xs, ys<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ys, x_label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$n$'</span>, y_label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$ x_n - \hat</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x_n}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> $'</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Trajectory for $r = 2$'</span>)</span></code></pre></div>
<p><img src="https://ritog.github.io/posts/non-linear-dynamics-trajectories-with-python/output_14_0.png" class="img-fluid"></p>
</section>
<section id="plotting-x_n---hatx_n-vs.-n-for-r3.4" class="level3">
<h3 class="anchored" data-anchor-id="plotting-x_n---hatx_n-vs.-n-for-r3.4">Plotting <img src="https://latex.codecogs.com/png.latex?x_n%20-%20%5Chat%7Bx_n%7D"> vs.&nbsp;<img src="https://latex.codecogs.com/png.latex?n"> for <img src="https://latex.codecogs.com/png.latex?r=3.4"></h3>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">x_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logistic_function_trajectory(parameter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.4</span>, initial_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, num_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb13-2">x_n_hat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logistic_function_trajectory(parameter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.4</span>, initial_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.200001</span>, num_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb13-3"></span>
<span id="cb13-4">ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(np.subtract(x_n, x_n_hat))</span>
<span id="cb13-5">xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb13-6"></span>
<span id="cb13-7">plot_trajectory(xs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>xs, ys<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ys, x_label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$n$'</span>, y_label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$ x_n - \hat</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x_n}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> $'</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Trajectory for $r = 3.4$'</span>)</span></code></pre></div>
<p><img src="https://ritog.github.io/posts/non-linear-dynamics-trajectories-with-python/output_16_0.png" class="img-fluid"></p>
<p>We can thus plot the trajectories of the Logistic Map with Python and relevant libraries.</p>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li>https://en.wikipedia.org/wiki/Logistic_map</li>
<li>Bradley, Liz: <em>Nonlinear Dynamics: Mathematical and Computational Approaches</em> via Complexity Explorer, Santa Fe Institute</li>
</ol>
<p>Cite this Notebook:</p>
<pre><code>@ONLINE {,
    author = "Ritobrata Ghosh",
    title  = "Non Linear Dynamics Trajectories with Python",
    month  = "apr",
    year   = "2023",
    url    = "https://www.kaggle.com/truthr/non-linear-dynamics-trajectories-with-python"
}</code></pre>


</section>

 ]]></description>
  <category>deep-learning</category>
  <category>physics</category>
  <category>chaos-theory</category>
  <category>ai</category>
  <guid>https://ritog.github.io/posts/non-linear-dynamics-trajectories-with-python/index.html</guid>
  <pubDate>Wed, 26 Apr 2023 18:30:00 GMT</pubDate>
  <media:content url="https://ritog.github.io/posts/non-linear-dynamics-trajectories-with-python/output_16_0.png" medium="image" type="image/png" height="75" width="144"/>
</item>
<item>
  <title>Stuff About Complex Number I Wish Somebody Told Me</title>
  <dc:creator>Ritobrata Ghosh</dc:creator>
  <link>https://ritog.github.io/posts/complex-numbers/index.html</link>
  <description><![CDATA[ 




<section id="stuff-about-complex-number-i-wish-somebody-told-me" class="level1">
<h1>Stuff About Complex Number I Wish Somebody Told Me</h1>
<p>by <a href="https://github.com/ritog">Rito Ghosh</a></p>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>There are many places that teach you complex number like High School, college classes, YouTube channels, and so on.</p>
<p>But they earlier ones often heavy on solving problems by-hand, and almost every time, they do only that.</p>
<p>The latter ones focus mainly on shiny visuals or advanced properties that are not intended for the uninitiated.</p>
<p>This is a piece written for both people who are getting introduced to Complex Numbers for the first time, and for the people who have studied it in college, and are hazy on the topic. (Why won’t they be? They had to focus on solving boring problems by hand.)</p>
<p>When I saw Jeremy talk about Complex Numbers on the APL study group, I knew I had to write something- I did my Junior year Math paper on Complex Number in High School!</p>
<p>The idea is to:</p>
<ul>
<li>quickly introduce Complex Numbers, and how to work with them</li>
<li>talk about their origins: why need complex numbers in the first place?</li>
<li>show how they extend the number line</li>
<li>show how <img src="https://latex.codecogs.com/png.latex?i"> works as an operator, and briefly what operators are</li>
<li>talk about a real world example, and probable future usage</li>
</ul>
<p>I will keep it short and crisp.</p>
<hr>
</section>
<section id="comples-numbers" class="level2">
<h2 class="anchored" data-anchor-id="comples-numbers">Comples Numbers</h2>
<p>Complex Numbers, as you might have seen are written like this:</p>
<p><img src="https://latex.codecogs.com/png.latex?x%20=%20a%20+%20ib"></p>
<p>Here, the whole thing in the right-hand side is the number. a is the Real part, and b is the imaginary part.</p>
<p>Do not get misguided by the names. Imaginary numbers aren’t imaginary at all. They make appearance, or rather, they can represent stuff in real life really well! We will soon see.</p>
<p>You can add and subtract complex numbers. You add (or subtract) the real and imaginary parts separately.</p>
<p>Let me show you.</p>
<p><img src="https://latex.codecogs.com/png.latex?(4%20+%205i)%20+%20(3%20+%206i)%20=%20(4%20+%203)%20+%20(5%20+%206)i"></p>
<p><img src="https://latex.codecogs.com/png.latex?%20(6i)%20-%20(3%20+%207i)%20=%20(0-3)%20-%20(7-6)i%20=%20-3%20-%20i"></p>
<p>They can be multiplied and divided with real numbers and other complex numbers. They work just as you expect them to.</p>
<p><img src="https://latex.codecogs.com/png.latex?(3%20+%202i)(1%20+%204i)%20=%203%20+%2012i%20+%202i%20+%208i%5E2"></p>
<p>Let’s not spend too much time here.</p>
<p>As how they behave, and more related information can quickly be found- and good ones at that- on internet.</p>
<p>I suggest the Khan Academy course on Complex Numbers.</p>
<hr>
<p>Oh, I haven’t told you the value of <img src="https://latex.codecogs.com/png.latex?i"> yet.</p>
<p><img src="https://latex.codecogs.com/png.latex?i">, is defined such that,</p>
<p><img src="https://latex.codecogs.com/png.latex?i%20=%20%5Csqrt(-1),%20%5Ctext%7Bor%7D,%20i%5E2%20=%20-1"></p>
<p>That’s it!</p>
<hr>
</section>
<section id="why-do-we-need-i-and-the-whole-complex-number-scenery" class="level2">
<h2 class="anchored" data-anchor-id="why-do-we-need-i-and-the-whole-complex-number-scenery">Why do we Need i, and the Whole Complex Number Scenery</h2>
<p>The story goes, when the Greeks were ridden with famines and other troubles, the Oracle of Delphi told them to double the height of the cube made in honor of Apollo.</p>
<p>The Greeks could not do it! How could they?</p>
<p>To double the size of a cube, you need to find the cube root of 2. The Greeks didn’t know how to that!</p>
<p>Too bad.</p>
<p>You are probably familiar with the story that Pythagoras, frustrated with the fact that the the size of the diagonal of a square with the side of 1 could not be measured, ordered to off someone! Just like that!</p>
<p>Because the square root of 2 was not measurable then. It is not a number that you write down like the others.</p>
<p>Human beings needed something that could be tamed- numbers that always had roots- no matter what the number was!</p>
<p>This is how it came to be. Complex numbers are numbers that always has roots. No matter what.</p>
<p>And with the advent of imaginary numbers, it was possible to calculate the square root of negative numbers, too. But that came later.</p>
<hr>
</section>
<section id="extending-the-number-line" class="level2">
<h2 class="anchored" data-anchor-id="extending-the-number-line">Extending the Number Line</h2>
<p>The number line is a simple animal.</p>
<p>It is one-dimensional. It extends both ways of zero.</p>
<p>And thus, it was limiting.</p>
<p>Complex numbers was defined in such a way that they added one extra dimension to the number line.</p>
<p>It wasn’t so one-dimensional anymore.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ritog.github.io/posts/complex-numbers/https:/upload.wikimedia.org/wikipedia/commons/5/50/A_plus_bi.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">argand plane</figcaption>
</figure>
</div>
<p>Picture: Wikipedia</p>
<p>Now, numbers weren’t limited to a line, but it was a plane.</p>
<p>And many more operations became possible that simply weren’t before.</p>
<hr>
</section>
<section id="i-as-an-operator" class="level2">
<h2 class="anchored" data-anchor-id="i-as-an-operator">i as an Operator</h2>
<p>i is not simple. Adding it or multiplying it has consequences.</p>
<p>If you don’t know yet, very simply, operators are stuff that act on other stuff.</p>
<p>(No mathematical rigor whatsoever can be expected from the previous line)</p>
<p>You know operators. We are talking about it in APL. We use them whenever we code.</p>
<p>Functions are also operators.</p>
<p>Think, for example, about the - operator.</p>
<p>This is our friendly negative sign. But add it before a positive number, and the result will be a negative number. The number will no longer remain positive.</p>
<p>Think about the + operator in math. It takes two numbers, not one. And the result is the sum of both of them.</p>
<p>Operator takes stuff in it, and spits out results.</p>
<p>i is also an operator.</p>
<p>Multiplying a number with i rotates the number by 90 degrees counter-clockwise in the complex plain.</p>
<p>Rotate it twice, and you get the negative of a number. Because, you know, i is the square of -1. And multiplying a number with square of i negates it, i.e.&nbsp;rotates the number by 180 degrees, or throws it to the dark, ehm, negative side.</p>
<p>This has important consequences.</p>
<hr>
</section>
<section id="example-of-use-of-complex-number-in-real-world-electronics" class="level2">
<h2 class="anchored" data-anchor-id="example-of-use-of-complex-number-in-real-world-electronics">Example of Use of Complex Number in Real World: Electronics</h2>
<p>The scope of this piece is very limited.</p>
<p>But I will show you one example.</p>
<p>Alternating Current is not steady, or fixed like Direct Current or DC. AC current, the one powers our home is the only practical form of electricity that can be practically transported from one point to another over a long distance.</p>
<p>This form of electricity acts like a wave.</p>
<p>And whenever waves are involved, we have to deal with angles, frequencies, and amplitudes.</p>
<p>When angles become involved, we can use trigonometric functions like cosine and sine.</p>
<p>And complex numbers are related to trigonometric functions via the Euler’s Formula:</p>
<p><img src="https://latex.codecogs.com/png.latex?e%5E%7Bi%20%5Ctheta%7D%20=%20%5Ccos%7B%5Ctheta%7D%20+%20i%20%5Ccdot%20%5Csin%7B%5Ctheta%7D"></p>
<p>And, when we can use the special number, e, we can solve many problems easily because the function returns itself after differentiation and integration.</p>
<p>That makes a lot of the things easier.</p>
<p>While this is the reason for using complex numbers in electronics in the first place, they also make life easier for easier calculation and quantity manipulation.</p>
<hr>
</section>
<section id="why-bother-isnt-one-more-dimension-enough" class="level2">
<h2 class="anchored" data-anchor-id="why-bother-isnt-one-more-dimension-enough">Why Bother: Isn’t One More Dimension Enough?</h2>
<p>You might think that complex numbers are such nuisance, and we could have done the same clever things with adding one more dimension to the real number like we do in geometry. Would not a ‘y’ suffice instead of this dimension riddled with ‘imaginary numbers’?</p>
<p>The answer is no.</p>
<p>You will not have the same behavior then.</p>
<p>You won’t be able to get the niceties that is afforded to you via Euler’s formula and the access it provides you to the exponential function.</p>
<hr>
<p>I hope I was able to give you some intuition about complex numbers, and their uses.</p>
<p>Please let me know what you think.</p>
<hr>
<p>Subscribe to my <a href="https://ritog.substack.com">substack</a> to get posts on your inbox, or subscribe via RSS.</p>


</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC-BY-NC-SA</div></div></section></div> ]]></description>
  <category>math</category>
  <guid>https://ritog.github.io/posts/complex-numbers/index.html</guid>
  <pubDate>Tue, 05 Jul 2022 18:30:00 GMT</pubDate>
  <media:content url="https://ritog.github.io/posts/complex-numbers/complex-numbers-post.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>A Gentle Introduction to the Hugging Face API</title>
  <dc:creator>Ritobrata Ghosh</dc:creator>
  <link>https://ritog.github.io/posts/intro-to-huggingface-api/2021-06-20-intro-huggingface-api.html</link>
  <description><![CDATA[ 




<p><img src="https://ritog.github.io/posts/intro-to-huggingface-api/2021-06-20-intro-huggingface-api-0.jpg" class="img-fluid"></p>
<section id="introduction" class="level3">
<h3 class="anchored" data-anchor-id="introduction">Introduction</h3>
<p>Natural Language Processing is a fast-advancing field. And it is also one of the fields that require a huge amount of computational resources to make important progress. And although breakthroughs are openly announced, and papers are released in free-to-access repositories such as <a href="https://arxiv.org/">arXiv</a>, Open Review, Papers with Code, etc., and despite (sometimes) having the code freely available on GitHub, using those language models is not something widely accessible and easy.</p>
<p>Let me provide more context. BERT is a state-of-the-art encoder language model. It takes days to train the model from the ground up even when using very powerful GPUs that only a few entities have access to. In 2019, NVIDIA <a href="https://nvidianews.nvidia.com/news/nvidia-achieves-breakthroughs-in-language-understandingto-enable-real-time-conversational-ai">used</a> 1472 NVIDIA V100 GPUs to train BERT from scratch in 53 minutes. Yes, 1,472!</p>
<p>One estimate <a href="https://twitter.com/eturner303/status/1266264358771757057?s=20">puts</a> the cost of training GPT-3, a 175 billion parameter model, for a single training run at $12 Million USD.</p>
<p>And such language models are released every now and then. How do you use these powerful language models for your task?</p>
<p>Here Hugging Face comes to the scene. They aim to solve this problem by providing pre-trained models, and simple API so that you can use them, fine-tune them, and use the API in your applications.</p>
<p>In this article, my goal is to introduce the Hugging Face <code>pipeline</code> API to accomplish very interesting tasks by utilizing powerful pre-trained models present in the models hub of Hugging Face.</p>
<p>To follow through this article, you need not have any prior knowledge of Natural Language Processing. I, however, assume minor prior experience in writing Python code.</p>
<hr>
<p>In this article, I will go over, describe, and provide examples for the following tasks using Hugging Face <code>pipeline</code>-</p>
<ul>
<li>Sentiment Analysis</li>
<li>Zero-Shot Classification</li>
<li>Text Generation</li>
<li>Mask-Filling</li>
<li>Named Entity Recognition</li>
<li>Question Answering</li>
<li>Summarization</li>
<li>Translation</li>
</ul>
<hr>
</section>
<section id="installing-and-importing" class="level3">
<h3 class="anchored" data-anchor-id="installing-and-importing">Installing and Importing</h3>
<pre><code>! pip install transformers[sentencepiece] &gt; /dev/null</code></pre>
<p>If you have not seen a <code>pip</code> install with a square bracket in it before, don’t worry. It means that you are installing the <code>transformers</code> package with extra support added for the <code>sentencepiece</code> package. You can find out more about square parentheses installs in <code>pip</code> <a href="https://stackoverflow.com/questions/46775346/what-do-square-brackets-mean-in-pip-install">here</a>.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pipeline</span></code></pre></div>
<p>We will use the utilities available in the <code>pipeline</code> namespace in the <code>transformers</code> library.</p>
<hr>
</section>
<section id="sentiment-analysis" class="level3">
<h3 class="anchored" data-anchor-id="sentiment-analysis">Sentiment Analysis</h3>
<p>Before I begin going through the specific <code>pipeline</code>s, let me tell you something beforehand that you will find yourself. Hugging Face API is very intuitive. When you want to use a <code>pipeline</code>, you have to instantiate an object, then you pass data to that object to get result. Very simple! You are soon to see what I mean.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">classifier_sentiment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentiment-analysis"</span>)</span></code></pre></div>
<p>That’s it. You call the <code>pipeline()</code> method with the task you want to accomplish as an argument. And you assign a name to it. You are done now. You can now begin to use the object as a function to achieve what you want. Let’s see an example-</p>
<iframe src="https://www.kaggle.com/embed/truthr/a-gentle-introduction-to-the-hugging-face-api?cellId=6&amp;cellIds=15&amp;kernelSessionId=66118660" height="150" style="margin: 0 auto; width: 100%; max-width: 950px;" frameborder="0" scrolling="auto" title="A Gentle Introduction to the Hugging Face API">
</iframe>
<p>See, it returns a dictionary contained in a list that has two items, <code>label</code> and <code>score</code>. The <code>label</code> part tells us its prediction, and the <code>score</code> tells us its confidence score.</p>
<blockquote class="blockquote">
<p><em>As an aside, I think they are structured this way because this structure is easily compatible with <code>.json</code> and similar filetypes which are very common in APIs.</em></p>
</blockquote>
<p>Let’s see another example.</p>
<iframe src="https://www.kaggle.com/embed/truthr/a-gentle-introduction-to-the-hugging-face-api?cellId=6&amp;cellIds=17&amp;kernelSessionId=66118660" height="150" style="margin: 0 auto; width: 100%; max-width: 950px;" frameborder="0" scrolling="auto" title="A Gentle Introduction to the Hugging Face API">
</iframe>
<p>See, how the classifier is aware of my emotion about pineapple pizzas? 🙃</p>
<hr>
</section>
<section id="zero-shot-classification" class="level3">
<h3 class="anchored" data-anchor-id="zero-shot-classification">Zero-Shot Classification</h3>
<p>When you want to classify something using Deep Learning, in many cases you need to train it with labeled examples. This approach is known as Supervised Learning. Even when leveraging transfer learning, you need to train your model with quite a few labeled examples in the domain of your choice. Zero-shot classification is different than that. In this, you use a pre-trained model to classify a given string and some labels of your choice. The model returns you the confidence score for each model.</p>
<p>Let me show you how this works. First, you instantiate an object and assign it a name just like you did in the case of the Sentiment Analysis pipeline.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">classifier_zero_shot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zero-shot-classification"</span>)</span></code></pre></div>
<p>Then you pass a string, along with the labels of your choice to test how well they correspond to your sentence.</p>
<iframe src="https://www.kaggle.com/embed/truthr/a-gentle-introduction-to-the-hugging-face-api?cellId=6&amp;cellIds=25&amp;kernelSessionId=66118660" height="260" style="margin: 0 auto; width: 100%; max-width: 950px;" frameborder="0" scrolling="auto" title="A Gentle Introduction to the Hugging Face API">
</iframe>
<p>See, the given sentence is about a profession, and the model tells you that. And it knows that it is much more related to education than politics.</p>
<p>Essentially, when you are doing Zero-Shot Classification, you are supplying a string to the <code>pipeline</code>, and also labels. The pipeline returns how accurate <strong>those labels are</strong>.</p>
<hr>
</section>
<section id="text-generation" class="level3">
<h3 class="anchored" data-anchor-id="text-generation">Text Generation</h3>
<p>Before I heard about Deep Learning, I heard about Natural Language Processing, because I heard that you can generate text with it! This is the most exciting part of NLP to me, personally.</p>
<p>As the name suggests, this <code>pipeline</code> lets you generate text. It just needs you to supply a prompt, a text that will determine what the generated text will be. Let me show you how.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text-generation"</span>)</span></code></pre></div>
<iframe src="https://www.kaggle.com/embed/truthr/a-gentle-introduction-to-the-hugging-face-api?cellId=6&amp;cellIds=30&amp;kernelSessionId=66118660" height="230" style="margin: 0 auto; width: 100%; max-width: 950px;" frameborder="0" scrolling="auto" title="A Gentle Introduction to the Hugging Face API">
</iframe>
<p>See what I mean! Even with zero training, it can create logically coherent text that is even interesting to read. Robots will take over writers soon 🤖!</p>
<p>You can control the maximum length of the output of the <code>pipeline</code>, and even ask for multiple possible outputs, like so-</p>
<iframe src="https://www.kaggle.com/embed/truthr/a-gentle-introduction-to-the-hugging-face-api?cellIds=34&amp;kernelSessionId=66128979" height="320" style="margin: 0 auto; width: 100%; max-width: 950px;" frameborder="0" scrolling="auto" title="A Gentle Introduction to the Hugging Face API">
</iframe>
<blockquote class="blockquote">
<p><em>Whoa, it’s poetic!</em></p>
</blockquote>
<p>We can accomplish more interesting things with transfer learning. But that is a story for another day.</p>
<hr>
</section>
<section id="mask-filling" class="level3">
<h3 class="anchored" data-anchor-id="mask-filling">Mask Filling</h3>
<p>In this pipeline, if there is a word that you hide and supply the string with the hidden word, the <code>pipeline</code> will predict that word. This is like magic!</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">unmasker <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill-mask"</span>)</span></code></pre></div>
<p>You pass the sentence with the masked word, and it will predict it. You can choose the number of predictions you want to see. You just have to pass a value to the <code>top_k</code> parameter.</p>
<iframe src="https://www.kaggle.com/embed/truthr/a-gentle-introduction-to-the-hugging-face-api?cellIds=41&amp;kernelSessionId=66128979" height="330" style="margin: 0 auto; width: 100%; max-width: 950px;" frameborder="0" scrolling="auto" title="A Gentle Introduction to the Hugging Face API">
</iframe>
<iframe src="https://www.kaggle.com/embed/truthr/a-gentle-introduction-to-the-hugging-face-api?cellId=6&amp;cellIds=40&amp;kernelSessionId=66118660" height="320" style="margin: 0 auto; width: 100%; max-width: 950px;" frameborder="0" scrolling="auto" title="A Gentle Introduction to the Hugging Face API">
</iframe>
<p>It can predict the words quite well. Just remember to mask the word using <code>&lt;mask&gt;</code>.</p>
<hr>
</section>
<section id="named-entity-recognition" class="level3">
<h3 class="anchored" data-anchor-id="named-entity-recognition">Named Entity Recognition</h3>
<p>This <code>pipeline</code> recognizes the proper nouns in your sentence. And it also classifies them. Let’s see an example.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">ner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ner"</span>, grouped_entities<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<p>The <code>grouped_entities</code> parameter just ensures that the <code>pipeline</code> can recognize the names that have more than one word, like, you know, Chocolate Factory.</p>
<iframe src="https://www.kaggle.com/embed/truthr/a-gentle-introduction-to-the-hugging-face-api?cellId=6&amp;cellIds=46&amp;kernelSessionId=66118660" height="400" style="margin: 0 auto; width: 100%; max-width: 950px;" frameborder="0" scrolling="auto" title="A Gentle Introduction to the Hugging Face API">
</iframe>
<p>See how it recognizes a person, his profession, and location on its own, and also labels them as “PER”, “ORG”, and “LOC” (meaning location), respectively.</p>
<hr>
</section>
<section id="question-answering" class="level3">
<h3 class="anchored" data-anchor-id="question-answering">Question Answering</h3>
<p>This pipeline provides you with an answer to a question you ask from the context that you provide.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">question_answerer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question-answering"</span>)</span></code></pre></div>
<iframe src="https://www.kaggle.com/embed/truthr/a-gentle-introduction-to-the-hugging-face-api?cellId=6&amp;cellIds=51&amp;kernelSessionId=66118660" height="210" style="margin: 0 auto; width: 100%; max-width: 950px;" frameborder="0" scrolling="auto" title="A Gentle Introduction to the Hugging Face API">
</iframe>
<p>It can answer multiple questions from the same prompt.</p>
<iframe src="https://www.kaggle.com/embed/truthr/a-gentle-introduction-to-the-hugging-face-api?cellId=6&amp;cellIds=53&amp;kernelSessionId=66118660" height="210" style="margin: 0 auto; width: 100%; max-width: 950px;" frameborder="0" scrolling="auto" title="A Gentle Introduction to the Hugging Face API">
</iframe>
<hr>
</section>
<section id="summarization" class="level3">
<h3 class="anchored" data-anchor-id="summarization">Summarization</h3>
<p>This is one of the most practical tasks that has existed for a long time. Deep Learning really changes the landscape of the task.</p>
<p>Let’s see it in action.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">summarizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"summarization"</span>)</span></code></pre></div>
<p>Let’s summarize a piece of text from a <a href="https://blog.royalsloth.eu/posts/i-wish-i-could-write-this-well/">blog post</a> I recently read.</p>
<iframe src="https://www.kaggle.com/embed/truthr/a-gentle-introduction-to-the-hugging-face-api?cellId=6&amp;cellIds=59&amp;kernelSessionId=66118660" height="650" style="margin: 0 auto; width: 100%; max-width: 950px;" frameborder="0" scrolling="auto" title="A Gentle Introduction to the Hugging Face API">
</iframe>
<p>Now, that’s something! The efficacy of the summarizer really shocked me. It does this task so well.</p>
<hr>
</section>
<section id="translation" class="level3">
<h3 class="anchored" data-anchor-id="translation">Translation</h3>
<p>The translation <code>pipeline</code> translates a piece of text from one language to another. It also lets you choose the language model of your choice.</p>
<p>First, let’s translate a text from English to German. I will use the <a href="https://huggingface.co/Helsinki-NLP/opus-mt-en-de"><code>Helsinki-NLP/opus-mt-en-de</code></a> model for this task.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">translator_de <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"translation"</span>, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Helsinki-NLP/opus-mt-en-de"</span>)</span></code></pre></div>
<iframe src="https://www.kaggle.com/embed/truthr/a-gentle-introduction-to-the-hugging-face-api?cellId=6&amp;cellIds=64&amp;kernelSessionId=66118660" height="165" style="margin: 0 auto; width: 100%; max-width: 950px;" frameborder="0" scrolling="auto" title="A Gentle Introduction to the Hugging Face API">
</iframe>
<p>Note that you are not explicitly telling the model about the language of the input language or the output language. A language model is only trained for translating from one language to another. It cannot translate other languages. If you want to translate from German to English, you’d have to use another model from the model hub. You can find all the translation models <a href="https://huggingface.co/models?pipeline_tag=translation">here</a>.</p>
<p>The cool thing is that Hugging Face is not limited to Romance languages or European languages in general. Let me show you by translating a piece of text from Bengali.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1">translator_bn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"translation"</span>, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Helsinki-NLP/opus-mt-bn-en"</span>)</span></code></pre></div>
<iframe src="https://www.kaggle.com/embed/truthr/a-gentle-introduction-to-the-hugging-face-api?cellId=6&amp;cellIds=68&amp;kernelSessionId=66118660" height="165" style="margin: 0 auto; width: 100%; max-width: 950px;" frameborder="0" scrolling="auto" title="A Gentle Introduction to the Hugging Face API">
</iframe>
<blockquote class="blockquote">

</blockquote>
<hr>
</section>
<section id="conclusion" class="level3">
<h3 class="anchored" data-anchor-id="conclusion">Conclusion</h3>
<p>I have shown you several pipeline APIs and what they do and how they work.</p>
<p>Here are the suggested next steps-</p>
<ul>
<li><strong>Experiment.</strong> Play with the <code>pipeline</code>s by yourself, try different things with different parameters, run inference on examples of your own, test edge cases, run wild with it. I believe that is the best way to learn.</li>
<li><strong>Do Projects.</strong> Use the knowledge you gained here in simple projects. We only learn by doing.</li>
<li><strong>Hugging Face Course.</strong> Hugging Face has recently released a <a href="https://huggingface.co/course/chapter1">free course</a> where they teach you about Transformers and their library ecosystem. It is a good next step.</li>
<li><strong>Explore.</strong> Explore the Hugging Face <a href="https://huggingface.co/">website</a>, learn more about their APIs, Services, pre-trained models, and many more things it has to offer.</li>
</ul>
<hr>
<p>If you notice any error, mistake, or typo, please feel free to let me know. If something is not clear, please let me know that as well. I will do my best to correct it and will credit you here.</p>
<p>Let me know if you have any questions at all.</p>
<hr>
<p><em>(Originally <a href="https://www.kaggle.com/truthr/a-gentle-introduction-to-the-hugging-face-api">published as a Notebook</a> on Kaggle.)</em></p>


</section>

 ]]></description>
  <category>deep-learning</category>
  <category>machine-learning</category>
  <category>data-science</category>
  <category>ai</category>
  <category>tutorial</category>
  <category>nlp</category>
  <category>kaggle</category>
  <guid>https://ritog.github.io/posts/intro-to-huggingface-api/2021-06-20-intro-huggingface-api.html</guid>
  <pubDate>Sat, 19 Jun 2021 18:30:00 GMT</pubDate>
  <media:content url="https://ritog.github.io/posts/intro-to-huggingface-api/2021-06-20-intro-huggingface-api-0.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Creating Any Boolean Function</title>
  <dc:creator>Ritobrata Ghosh</dc:creator>
  <link>https://ritog.github.io/posts/nand2tetris_1/2021-06-13-chips-logic-gates-nand2tetris-1.html</link>
  <description><![CDATA[ 




<p>by <a href="https://ritog.github.io">Ritobrata Ghosh</a></p>
<section id="introduction" class="level3">
<h3 class="anchored" data-anchor-id="introduction">Introduction</h3>
<p>Digital electronics is probably the most impactful and widespread technology now. It forms the basis of all of the chips- from ARM microcontrollers to processors in cellphones, all the way to uberpowerful AMD Threadrippers. In all these cases, digital electronics reign supreme.</p>
<p>It is very useful to learn not only about basic principles but also how these principles and the components of Digital Electronics exactly form the basis of the modern world, i.e., how do we go from basic logic gates to fully functional computers.</p>
</section>
<section id="elements-of-computing-systems" class="level3">
<h3 class="anchored" data-anchor-id="elements-of-computing-systems">Elements of Computing Systems</h3>
<p>Digital Electronics is not only important because it is the base of the modern technology that literally governs our lives, but it makes us better as programmers, and computer scientists.</p>
<p>Whether we are self-taught programmers or a person with a 4-year CS degree, we were never taught how we go from basic logic gates to CPUs.</p>
<p>A book that I have come across- <a href="https://mitpress.mit.edu/books/elements-computing-systems-second-edition"><em>The Elements of Computing Systems</em></a> by By Noam Nisan and Shimon Schocken does just that. It teaches you how the basic building blocks of modern computers actually create the computers.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ritog.github.io/posts/nand2tetris_1/https:/m.media-amazon.com/images/I/71tRTKR3NOL._SL1500_.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">nand2tetris-book-cover-2ed</figcaption>
</figure>
</div>
<p><em>[Although it shows the new 2nd edition, I am reading the first one]</em></p>
<p>It promises to teach you, actively, how we can start from nothing but a NAND gate and go all the way to a full-fledged computer with an operating system, and a general-purpose programming language that runs on it, which can be used to create anything. The book is also known as <strong><em>nand2tetris</em></strong>.</p>
<p>I have started reading this book and working through it every Sunday, and I have almost finished a chapter.</p>
</section>
<section id="building-gates-from-elementary-gates" class="level3">
<h3 class="anchored" data-anchor-id="building-gates-from-elementary-gates">Building Gates from Elementary Gates</h3>
<p>People who have taken a Digital Architecture class or a Digital Electronics class will know that NAND (NOT AND) gates are called “universal gates” because some combination of them are able to create any other gates. So, when you have a NAND gate with you, you can create a general-purpose computer with it. And the book makes you do that. It makes you create many logic gates starting from AND, NOT, and OR with nothing but a pre-implemented NAND gate.</p>
<p>So, a NAND gate is already implemented and supplied. You first have to create AND, OR, and NOT gates. Then you go on to further create XOR gates, Multiplexors (MUX), Demultiplexors (D-MUX), and multi-bit versions of these gates and basic gates with what you have built previously, viz.&nbsp;AND, OR, NOT, and NAND gates.</p>
<p>This is a fascinating task in itself, and very intellectually stimulating.</p>
<p>This is where the core of the post comes in.</p>
<p>I will show you how to implement any Boolean function with nothing but three logic gates. This is a trick worth knowing.</p>
<p>Let’s start.</p>
<hr>
</section>
<section id="implementing-a-boolean-function" class="level3">
<h3 class="anchored" data-anchor-id="implementing-a-boolean-function">Implementing a Boolean Function</h3>
<section id="design-a-boolean-function" class="level4">
<h4 class="anchored" data-anchor-id="design-a-boolean-function">Design a Boolean Function</h4>
<p>Let’s say we need a Boolean function that behaves in such a way-</p>
<table class="table">
<thead>
<tr class="header">
<th>A</th>
<th>B</th>
<th>C</th>
<th>Y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="even">
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="odd">
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="odd">
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="even">
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="odd">
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="even">
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>This <em>truth table</em> tells you that we need such a Boolean function that outputs 1 iff- * <em>A</em>, <em>B</em>, and <em>C</em>, three Boolean variables, are all 0 * only <em>A</em> is 1, <em>B</em> and <em>C</em> are 0 * <em>A</em> and <em>C</em> are 1, <em>B</em> is 0 * <em>A</em> and <em>B</em> are 1, <em>C</em> is 0</p>
<p>Now, in some situations, you might need to define a Boolean function that behaves as you expect. Do not worry about what this function is doing. Let’s focus on the implementation part.</p>
</section>
<section id="boolean-expression" class="level4">
<h4 class="anchored" data-anchor-id="boolean-expression">Boolean Expression</h4>
<p>I am assuming that you already know about the basic gates, and how they function.</p>
<p>So, in the first step to build a Boolean function, you must create the Boolean expression. Just like a Boolean variable can have two values (0, 1), and a Boolean function can only output two values (0, 1, duh!), a Boolean expression always evaluates to either 0 or 1.</p>
<p>How to actually do it?</p>
<ol type="1">
<li>You should just note in which cases the function outputs a 1. Focus just on those.</li>
<li>Note which variables are on (1) and which are off (0).</li>
<li>Keep the variables unchanged which are 1 in this case, and take a negation of those which are off (in electronics, you would put them through NOT).</li>
<li>Multiply them together.</li>
<li>For these products for each 1 in the output, just add them together.</li>
</ol>
<p>That’s it. You have got your Boolean expression.</p>
<p>Let me go through it step by step.</p>
<p>In the first occurrence of 1 in the output, we see that all the input variables are off. So, we get a*, b*, and c*, where a, b, and c are the variables representing inputs <em>A</em>, <em>B</em>, and <em>C</em>, respectively, and x* is the negation of x. We multiply them together, and we get a*b*c*.</p>
<p>In the second occurrence of 1, in a similar manner, we get- ab*c*.</p>
<p>For the third and fourth occurrences of 1, we get ab*c, and abc*, respectively.</p>
<p>We have to add them. And doing so, we get-</p>
<p><img src="https://latex.codecogs.com/png.latex?%20y%20=%20%5Coverline%7Ba%7D%5Coverline%7Bb%7D%5Coverline%7Bc%7D%20+%20a%5Coverline%7Bb%7D%5Coverline%7Bc%7D%20+%20a%5Coverline%7Bb%7Dc%20+%20ab%5Coverline%7Bc%7D%20"></p>
<p>[You are required to write cases in the proper order. The first of three variable has these values row-wise- 0-0-0-0-1-1-1-1, the second one varies- 0-0-1-1-0-0-1-1, and the third one- 0-1-0-1-0-1-0-1.]</p>
</section>
<section id="implementation" class="level4">
<h4 class="anchored" data-anchor-id="implementation">Implementation</h4>
<p>You might be already aware that negation is passing through a NOT gate, multiplying is just passing through an AND gate, and adding is just an OR gate.</p>
<p>The first <em>component</em> a*b*c* can be obtained in this way-</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ritog.github.io/posts/nand2tetris_1/https:/cdn.hashnode.com/res/hashnode/image/upload/v1623507789933/QBItJ0Vmd.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
<p>And here are the second, third, and fourth components-</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ritog.github.io/posts/nand2tetris_1/https:/cdn.hashnode.com/res/hashnode/image/upload/v1623507861780/SGdZszA-c.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ritog.github.io/posts/nand2tetris_1/https:/cdn.hashnode.com/res/hashnode/image/upload/v1623508014150/-0UIiS7o5.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
<p>And,</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ritog.github.io/posts/nand2tetris_1/https:/cdn.hashnode.com/res/hashnode/image/upload/v1623508144340/0hlCdyidE.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
<p>Now, we have to add them all together, i.e.&nbsp;put these components through an OR gate. The output of the OR gate will be our final output.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ritog.github.io/posts/nand2tetris_1/https:/cdn.hashnode.com/res/hashnode/image/upload/v1623566604394/Cm-9WW_ftX.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
<p>Our final output.</p>
</section>
<section id="hdl-implement-and-test" class="level4">
<h4 class="anchored" data-anchor-id="hdl-implement-and-test">HDL: Implement and Test</h4>
<p>Now, if you have ICs lying around, you can quickly test this with a power supply or a 5V cell, and some wires. You will also need a multimeter or LED bulbs to check your output.</p>
<p>But, remember, we are building a computer from scratch when following this book. Using thousands of ICs to build a computer is not slightly practical unless you happen to have a contract with TSMC!</p>
<p>Something called HDL (Hardware Description Language) is used. It is an intuitive, high-level, special-purpose programming language that you use to design and test chips, and use previously created chips.</p>
<p>It is implemented in Java, but you do not have to worry about its implementation, you just need to use it. A GUI program is also supplied to do load and test chips.</p>
<p>For example, given a NAND gate, you will design an AND gate this way.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ritog.github.io/posts/nand2tetris_1/https:/cdn.hashnode.com/res/hashnode/image/upload/v1623567491868/2i-eaHy4V.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
<p>As you can see, it is very intuitive, and you can pick it up in 20 minutes.</p>
<p>And, this is how you’d test this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ritog.github.io/posts/nand2tetris_1/https:/cdn.hashnode.com/res/hashnode/image/upload/v1623567613326/EIaikZlbD.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
<p>To write our custom function in HDL, we would do-</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource hdl number-lines code-with-copy"><code class="sourceCode"><span id="cb1-1">// Custom.hdl</span>
<span id="cb1-2">// this is a part of Hashnode blog Convoluted demo</span>
<span id="cb1-3"></span>
<span id="cb1-4">CHIP Custom {</span>
<span id="cb1-5">    IN a, b, c;</span>
<span id="cb1-6">    OUT out;</span>
<span id="cb1-7"></span>
<span id="cb1-8">    PARTS:</span>
<span id="cb1-9">    Not(in=a, out=nota);</span>
<span id="cb1-10">    Not(in=b, out=notb);</span>
<span id="cb1-11">    Not(in=c, out=notc);</span>
<span id="cb1-12">    And(a=nota, b=notb, out=notanotb);</span>
<span id="cb1-13">    And(a=notanotb, b=notc, out=w1);</span>
<span id="cb1-14">    And(a=a, b=notb, out=anotb);</span>
<span id="cb1-15">    And(a=anotb, b=notc, out=w2);</span>
<span id="cb1-16">    And(a=anotb, b=c, out=w3);</span>
<span id="cb1-17">    And(a=a, b=b, out=ab);</span>
<span id="cb1-18">    And(a=ab, b=notc, out=w4);</span>
<span id="cb1-19">    Or8Way(in[0]=w1, in[1]=w2, in[2]=w3, in[3]=w4, out=out);</span>
<span id="cb1-20">}</span></code></pre></div>
<p>And as this is a custom chip, the <code>.tst</code> test file, and <code>.cmp</code> compare file are not supplied. So, for testing this chip, I wrote my own.</p>
<p>Here is the test (<code>.tst</code>) file-</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource hdl number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">// Custom.tst</span>
<span id="cb2-2">// test file for testing custom chip</span>
<span id="cb2-3">// could be found at- https://gist.github.com/ghosh-r/c4e6f5ceb1e7ea2e3ba3601c9de121be</span>
<span id="cb2-4"></span>
<span id="cb2-5">// test file for a custom chip in Convoluted, a Hashnode blog</span>
<span id="cb2-6"></span>
<span id="cb2-7">load Custom.hdl,</span>
<span id="cb2-8">output-file Custom.out,</span>
<span id="cb2-9">compare-to Custom.cmp,</span>
<span id="cb2-10">output-list a%B3.1.3 b%B3.1.3 c%B3.1.3 out%B3.1.3;</span>
<span id="cb2-11"></span>
<span id="cb2-12">set a 0,</span>
<span id="cb2-13">set b 0,</span>
<span id="cb2-14">set c 0,</span>
<span id="cb2-15">eval,</span>
<span id="cb2-16">output;</span>
<span id="cb2-17"></span>
<span id="cb2-18">set a 0,</span>
<span id="cb2-19">set b 0,</span>
<span id="cb2-20">set c 1,</span>
<span id="cb2-21">eval,</span>
<span id="cb2-22">output;</span>
<span id="cb2-23"></span>
<span id="cb2-24">set a 0,</span>
<span id="cb2-25">set b 1,</span>
<span id="cb2-26">set c 0,</span>
<span id="cb2-27">eval,</span>
<span id="cb2-28">output;</span>
<span id="cb2-29"></span>
<span id="cb2-30">set a 0,</span>
<span id="cb2-31">set b 1,</span>
<span id="cb2-32">set c 1,</span>
<span id="cb2-33">eval,</span>
<span id="cb2-34">output; </span>
<span id="cb2-35"></span>
<span id="cb2-36">set a 1,</span>
<span id="cb2-37">set b 0,</span>
<span id="cb2-38">set c 0,</span>
<span id="cb2-39">eval,</span>
<span id="cb2-40">output;</span>
<span id="cb2-41"></span>
<span id="cb2-42">set a 1,</span>
<span id="cb2-43">set b 0,</span>
<span id="cb2-44">set c 1,</span>
<span id="cb2-45">eval,</span>
<span id="cb2-46">output;</span>
<span id="cb2-47"></span>
<span id="cb2-48">set a 1,</span>
<span id="cb2-49">set b 1,</span>
<span id="cb2-50">set c 0,</span>
<span id="cb2-51">eval,</span>
<span id="cb2-52">output;</span>
<span id="cb2-53"></span>
<span id="cb2-54">set a 1,</span>
<span id="cb2-55">set b 1,</span>
<span id="cb2-56">set c 1,</span>
<span id="cb2-57">eval,</span>
<span id="cb2-58">output;</span></code></pre></div>
<p>And here is the compare (<code>.cmp</code>) file. It contains the truth table that we expect.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource hdl number-lines code-with-copy"><code class="sourceCode"><span id="cb3-1">// Custom.cmp</span>
<span id="cb3-2">// compare file for chip Custom.hdl</span>
<span id="cb3-3">// found at- https://gist.github.com/ghosh-r/c4e6f5ceb1e7ea2e3ba3601c9de121be</span>
<span id="cb3-4">// test file at- https://gist.github.com/ghosh-r/cef52b9f6ac017e00d64460b025a53fe</span>
<span id="cb3-5"></span>
<span id="cb3-6">|   a   |   b   |   c   |  out  |</span>
<span id="cb3-7">|   0   |   0   |   0   |   1   |</span>
<span id="cb3-8">|   0   |   0   |   1   |   0   |</span>
<span id="cb3-9">|   0   |   1   |   0   |   0   |</span>
<span id="cb3-10">|   0   |   1   |   1   |   0   |</span>
<span id="cb3-11">|   1   |   0   |   0   |   1   |</span>
<span id="cb3-12">|   1   |   0   |   1   |   1   |</span>
<span id="cb3-13">|   1   |   1   |   0   |   1   |</span>
<span id="cb3-14">|   1   |   1   |   1   |   0   |</span></code></pre></div>
<p>Note that the text in Compare files is not robust to whitespaces.</p>
<p>It will be compared with the output file generated by the simulator.</p>
<p>Here’s how the successful run looks like-</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ritog.github.io/posts/nand2tetris_1/https:/cdn.hashnode.com/res/hashnode/image/upload/v1623576505734/bj93xn62K.gif" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">final_60c5cd572911290063ac8055_216317.gif</figcaption>
</figure>
</div>
</section>
<section id="another-example-xor-gate" class="level4">
<h4 class="anchored" data-anchor-id="another-example-xor-gate">Another Example: XOR Gate</h4>
<p>Suppose you want to implement a XOR gate from basic gates. And the truth-table would be-</p>
<table class="table">
<thead>
<tr class="header">
<th>A</th>
<th>B</th>
<th>Y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="odd">
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="even">
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>This will be your Boolean expression-</p>
<p><img src="https://latex.codecogs.com/png.latex?%20y%20=%20%5Coverline%7Ba%7Db%20+%20a%5Coverline%7Bb%7D%20"></p>
<p>And this will be your HDL implementation.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource hdl number-lines code-with-copy"><code class="sourceCode"><span id="cb4-1">// Xor.hdl</span>
<span id="cb4-2"></span>
<span id="cb4-3">CHIP Xor {</span>
<span id="cb4-4">    IN a, b;</span>
<span id="cb4-5">    OUT out;</span>
<span id="cb4-6"></span>
<span id="cb4-7">    PARTS:</span>
<span id="cb4-8">    Not(in=a, out=nota);</span>
<span id="cb4-9">    Not(in=b, out=notb);</span>
<span id="cb4-10">    And(a=a, b=notb, out=w1);</span>
<span id="cb4-11">    And(a=nota, b=b, out=w2);</span>
<span id="cb4-12">    Or(a=w1, b=w2, out=out);</span>
<span id="cb4-13">}</span></code></pre></div>
<hr>
</section>
</section>
<section id="conclusion" class="level3">
<h3 class="anchored" data-anchor-id="conclusion">Conclusion</h3>
<p>I showed you how to implement any Boolean function with nothing but three elementary logic gates. However, you should keep in mind that this approach is impractical when there are more variables, and the chip you want is more complicated.</p>
<hr>
<p>Follow the blog to get more similar posts.</p>
<p>Follow me on <a href="https://twitter.com/AllesistKode">Twitter</a> or connect with me on <a href="https://www.linkedin.com/in/ritobrata-ghosh/">LinkedIn</a>.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC-BY-NC-SA</div></div></section></div> ]]></description>
  <category>nand2tetris</category>
  <category>computer-science</category>
  <category>electronics</category>
  <category>computation</category>
  <guid>https://ritog.github.io/posts/nand2tetris_1/2021-06-13-chips-logic-gates-nand2tetris-1.html</guid>
  <pubDate>Sat, 12 Jun 2021 18:30:00 GMT</pubDate>
  <media:content url="https://ritog.github.io/posts/nand2tetris_1/2021-06-13-chips-logic-gates-nand2tetris-1-1.png" medium="image" type="image/png" height="76" width="144"/>
</item>
</channel>
</rss>
